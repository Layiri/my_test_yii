<?php

namespace app\models;

use app\helpers\AvatarHelper;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "objects".
 *
 * @property int $id
 * @property string|null $name
 * @property string|null $images
 * @property int $object_id
 * @property int $created_at
 * @property int $created_by
 * @property int $updated_at
 * @property int $updated_by
 *
 * @property Objects $object
 * @property Objects[] $objects
 * @property TasksObjects[] $tasksObjects
 */
class Objects extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'objects';
    }

    public $remove_image;
    public $file_image;

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [

            [['file_image'], 'file', 'skipOnEmpty' => true, 'minWidth' => 150, 'minHeight' => 150, 'extensions' => 'png, jpg', 'mimeTypes' => 'image/jpeg, image/png'],
            [['images'], 'default', 'value' => []],
            [['images'], 'safe'],

            [['object_id'], 'required'],
            [['object_id', 'created_at', 'created_by', 'updated_at', 'updated_by'], 'integer'],
            [['name'], 'string', 'max' => 255],
            [['object_id'], 'exist', 'skipOnError' => true, 'targetClass' => Objects::className(), 'targetAttribute' => ['object_id' => 'id']],
        ];
    }

    public function beforeSave($insert)
    {
        $time = time();
        if ($this->isNewRecord) {
            $this->created_at = $time;
            if (Yii::$app->getUser()->id) {
                $this->created_by = Yii::$app->getUser()->id;
            }
        }

        $this->updated_at = $time;
        if (Yii::$app->getUser()->id) {
            $this->updated_by = Yii::$app->getUser()->id;
        } else {
            $this->updated_by = 1;

        }


        if (!$this->isNewRecord) {
            $file_image = AvatarHelper::saveAvatar($this, 'file_image', Yii::$app->user->id);
            if (!empty($file_image)) {
                if ($this->images != null) {
                    $this->removeAvatar();
                }
                $this->images = $file_image;
            } else {
                $this->images = (!empty($this->images)) ? $this->images : [];
            }
            if ($this->remove_image == 1) {
                $this->removeAvatar();
            }
        } else {
            $file_image = AvatarHelper::saveAvatar($this, 'file_image', Yii::$app->user->id);
            if (!empty($file_image)) {
                if ($this->images != null) {
                    $this->removeAvatar();
                }
                $this->images = $file_image;
            } else {
                $this->images = (!empty($this->images)) ? $this->images : [];
            }
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'images' => 'Images',
            'object_id' => 'Object ID',
            'created_at' => 'Created At',
            'created_by' => 'Created By',
            'updated_at' => 'Updated At',
            'updated_by' => 'Updated By',
        ];
    }

    /**
     * Gets query for [[Object]].
     *
     * @return \yii\db\ActiveQuery|\app\models\query\ObjectsQuery
     */
    public function getObject()
    {
        return $this->hasOne(Objects::className(), ['id' => 'object_id']);
    }

    /**
     * Gets query for [[Objects]].
     *
     * @return \yii\db\ActiveQuery|\app\models\query\ObjectsQuery
     */
    public function getObjects()
    {
        return $this->hasMany(Objects::className(), ['object_id' => 'id']);
    }

    /**
     * Gets query for [[TasksObjects]].
     *
     * @return \yii\db\ActiveQuery|\app\models\query\TasksObjectsQuery
     */
    public function getTasksObjects()
    {
        return $this->hasMany(TasksObjects::className(), ['object_id' => 'id']);
    }

    /**
     * {@inheritdoc}
     * @return \app\models\query\ObjectsQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\ObjectsQuery(get_called_class());
    }

    public static function getObjectsArray()
    {
        $objects = self::find()->all();

        $objects_array = [];
        foreach ($objects as $obj) {
            $objects_array[$obj->id]['id'] = $obj->id;
            $objects_array[$obj->id]['name'] = $obj->name;
        }
        return ArrayHelper::map($objects_array, 'id', 'name');
    }

}
